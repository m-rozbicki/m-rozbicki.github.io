{"version":3,"sources":["QuizQuestion.js","QuizStatus.js","Quiz.js","SpotifyDataProvider.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","props","previewPlayer","question","questionType","react_default","a","createElement","autoPlay","controls","src","preview_url","Fragment","className","questionString","answers","map","answer","key","onClick","e","onAnswerSelect","correctAnswer","QuizStatus","points","point","index","Quiz","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Array","questionsAmount","fill","questions","prepareQuestions","tracks","questionNumber","answerSelected","arguments","length","undefined","answersAmount","shuffle","Math","random","pickQuestion","_len","fns","_key","arg","reduce","x","f","pipe","track","objectSpread","id","askFor","_ref","objectWithoutProperties","audio","album","artist","name","text","concat","year","toConsumableArray","Set","filter","sort","slice","pickRandomAnswers","_ref2","callback","passEvens","counter","element","passEveryOtherTime","_this2","answerElement","target","correctAnswerElement","from","document","querySelectorAll","find","innerText","toString","setState","setTimeout","_this3","src_QuizQuestion","src_QuizStatus","value","onReset","Component","defaultProps","demoPlaylist","require","SpotifyDataProvider","loginUrl","clientId","encodeURIComponent","redirectUri","authToken","window","location","hash","indexOf","substring","playlists","selectedPlaylist","fetch","headers","Content-Type","Accept","Authorization","then","response","json","result","items","href","forEach","item","push","artists","Date","release_date","getFullYear","next","getTracks","getPlaylists","playlist","total","_this4","demo","replace","_this5","src_Quiz","reset","selectPlaylist","origin","pathname","App","src_SpotifyDataProvider","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64e2399b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction QuizQuestion(props) {\n  const previewPlayer = props.question.questionType === 'audio'\n    ? <audio autoPlay controls>\n        <source src={props.question.preview_url}/>\n      </audio>\n    : null;\n\n    return (\n      <React.Fragment>\n        <p className='instruction'>{props.question.questionString}</p>\n        <ul>{\n            props.question.answers.map((answer) =>\n              <li\n                key={answer}\n                onClick={(e) => props.onAnswerSelect(props.question.correctAnswer, answer, e)}\n              >\n                {answer}\n              </li>\n            )\n        }</ul>\n        {previewPlayer}\n      </React.Fragment>\n    );\n}\n\nexport default QuizQuestion;\n","import React from 'react';\n\nfunction QuizStatus(props) {\n    return (\n      <table>\n        <tbody>\n          <tr>{\n            props.points.map((point, index) => {\n              if(point === 1)\n                return <td key={index} className='correctAnswer'></td>\n              else if(point === 2)\n                return <td key={index} className='wrongAnswer'></td>\n              else\n                return <td key={index}></td>\n            })\n          }</tr>\n        </tbody>\n      </table>\n    );\n}\n\nexport default QuizStatus;\n","import React, { Component } from 'react';\nimport QuizQuestion from './QuizQuestion';\nimport QuizStatus from './QuizStatus';\n\nclass Quiz extends Component {\n  static defaultProps = {\n    questionsAmount: 10,\n    answersAmount: 4\n  }\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      points: new Array(this.props.questionsAmount).fill(0),\n      questions: this.prepareQuestions(this.props.tracks),\n      questionNumber: 0,\n      answerSelected: false\n    }\n  }\n\n  prepareQuestions(tracks, questionsAmount = this.props.questionsAmount, answersAmount = this.props.answersAmount) {\n    const pipe = (...fns) => arg => fns.reduce((x, f) => f(x), arg);\n\n    const shuffle = () => Math.random() - 0.5;\n\n    const assignQuestionType = (track) => ({\n      ...track, questionType: (track.id % 2) ? 'audio': 'text'\n    });\n\n    const assignAskFor = track => ({\n      ...track, askFor: track.questionType === 'audio'\n        ? (['album', 'artist', 'name'])[track.id % 3]\n        : (['album', 'artist', 'year'])[track.id % 3]\n    });\n\n    const assignCorrectAnswer = ({ askFor, ...track}) => ({\n      ...track, askFor, correctAnswer: track[askFor]\n    });\n\n    const assignQuestionString = track => ({\n      ...track,\n      questionString: {\n        audio: {\n          album: `Z którego albumu pochodzi utwór z odtwarzacza?`,\n          artist: `Kto jest wykonawcą utwóru z odtwarzacza?`,\n          name: `Jak brzmi tytuł utwóru z odtwarzacza?`\n        },\n        text: {\n          album: `${track.name} w wykonaniu ${track.artist} znalazł się na płycie:`,\n          artist: `Kto był wykonawcą utworu ${track.name}?`,\n          year: `Utwór ${track.name} wykonawcy ${track.artist} znalazł się na płycie ${track.album}.\n          W którym roku ukazał się ten album?`,\n        }\n      }[track.questionType][track.askFor],\n    });\n\n    const pickRandomAnswers = (tracks, askFor, correctAnswer) =>\n      [...new Set(tracks.map(track => track[askFor]))]\n      .filter(answer => answer !== correctAnswer)\n      .sort(shuffle)\n      .slice(0, answersAmount - 1)\n      .concat(correctAnswer)\n      .sort(shuffle)\n\n    const assignAnswers = track =>  ({\n      ...track, answers: pickRandomAnswers(tracks, track.askFor, track.correctAnswer)\n    });\n\n    const reshapeQuestion = ({ questionType, questionString, answers, correctAnswer, preview_url }) => ({\n      questionType, questionString, answers, correctAnswer, preview_url\n    });\n\n    const pickQuestion = pipe(\n      assignQuestionType,\n      assignAskFor,\n      assignCorrectAnswer,\n      assignQuestionString,\n      assignAnswers,\n      reshapeQuestion\n    );\n\n    const passEveryOtherTime = (callback, passEvens = true) => {\n      let counter = 0;\n      return (element) => {\n          if(callback(element) || counter % 2 === (passEvens ? 0 : 1)) {\n            counter++;\n            return true;\n          }\n      }\n    }\n\n    return tracks\n      .sort(shuffle)\n      .filter(passEveryOtherTime((track) => track.preview_url))\n      .slice(0, questionsAmount)\n      .map((track, id) => pickQuestion({ ...track, id }))\n  }\n\n  onAnswerSelect(correctAnswer, answer, e) {\n    if(!this.state.answerSelected) {\n      let points = this.state.points;\n      let answerElement = e.target;\n      let correctAnswerElement = Array.from([...document.querySelectorAll(\"li\")])\n        .find(element => element.innerText === correctAnswer.toString());\n      if (correctAnswer === answer) {\n        points[this.state.questionNumber] = 1;\n        answerElement.className = 'correctAnswer';\n      }\n      else {\n        points[this.state.questionNumber] = 2;\n        answerElement.className = 'wrongAnswer';\n        correctAnswerElement.className = 'correctAnswer';\n      }\n\n      this.setState({points: points, answerSelected: true});\n\n      setTimeout ((e) => {\n        answerElement.className = '';\n        correctAnswerElement.className = '';\n        this.setState({\n          questionNumber: this.state.questionNumber + 1,\n          answerSelected: false\n        });\n      }, 2000);\n    }\n  }\n\n  render() {\n    if(this.state.questionNumber < this.props.questionsAmount) {\n      return (\n        <React.Fragment>\n          <QuizQuestion\n            question={this.state.questions[this.state.questionNumber]}\n            onAnswerSelect={(correctAnswer, answer, e) => this.onAnswerSelect(correctAnswer, answer, e)}\n          />\n          <QuizStatus points={this.state.points}/>\n        </React.Fragment>\n      )\n    }\n    else {\n      return (\n        <React.Fragment>\n          <p className='instruction'>{'Odpowiedziano poprawnie na ' + this.state.points.filter(value => value === 1 ? 1 : null).length + ' z ' + this.state.questionNumber + ' pytań.'}</p>\n          <button onClick = {this.props.onReset}>Jeszcze raz</button>\n          <QuizStatus points={this.state.points}/>\n        </React.Fragment>\n      )\n    }\n  }\n}\n\nexport default Quiz;\n","import React, { Component } from 'react';\nimport Quiz from './Quiz';\nconst demoPlaylist = require('./demo.json');\n\nclass SpotifyDataProvider extends Component {\n  static defaultProps = {\n    redirectUri: window.location.origin + window.location.pathname\n  };\n\n  constructor (props) {\n    super(props);\n\n    this.loginUrl = 'https://accounts.spotify.com/authorize' +\n      '?response_type=token' +\n      '&client_id=' + this.props.clientId +\n      '&scope=playlist-read-private' +\n      '&redirect_uri=' + encodeURIComponent(this.props.redirectUri);\n\n    this.state = {\n      authToken: window.location.hash.indexOf('access_token') > 0\n        ? window.location.hash.substring(window.location.hash.indexOf('access_token')+13)\n        : null,\n      playlists: [],\n      selectedPlaylist: null,\n      tracks: [],\n    };\n  }\n\n  getPlaylists() {\n    return fetch('https://api.spotify.com/v1/me/playlists',\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': ('Bearer ' + this.state.authToken)\n        }\n      })\n      .then(response => response.json())\n      .then(result => result.items);\n  }\n\n  getTracks(href, tracks = []) {\n    const reshapeTrack = (track) => ({\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      year: (new Date(track.album.release_date)).getFullYear(),\n      preview_url: track.preview_url\n    })\n\n    return fetch(href,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': ('Bearer ' + this.state.authToken)\n        }\n      })\n      .then(response => response.json())\n      .then(result => {\n        result.items.forEach(item => tracks.push(reshapeTrack(item.track)));\n        if (result.next)\n          return this.getTracks(result.next, tracks);\n        return tracks;\n      });\n  }\n\n  componentDidMount () {\n    if(this.state.authToken)\n      this.getPlaylists()\n        .then((playlists) => this.setState({\n          playlists: playlists.filter(playlist => playlist.tracks.total > 50)\n        }));\n  }\n\n  selectPlaylist(playlist) {\n    this.setState({selectedPlaylist: playlist});\n    this.getTracks(playlist.tracks.href)\n      .then(tracks => this.setState({tracks: tracks}));\n  }\n\n  demo(){\n    this.setState({\n      authToken: 'demo',\n      selectedPlaylist: {tracks: {total: demoPlaylist.length}},\n      tracks: demoPlaylist,\n      demo: true\n    })\n  }\n\n  reset() {\n    if(this.state.demo) {\n      this.setState({\n        authToken: null,\n        selectedPlaylist: null,\n        tracks: [],\n        demo: false\n      })\n    }\n    else\n      window.location.replace(this.loginUrl);\n  }\n\n  render() {\n    if (!this.state.authToken) {\n      return (\n        <React.Fragment>\n          <p className='instruction'>Aby rozpocząć musisz się zalogować. Uzyskany zostanie wyłącznie dostęp do danych wymienionych w kolejnym kroku, twoje hasło nie zostanie udostępnione.</p>\n          <p><a href={this.loginUrl}><button>Zaloguj się do Spotify</button></a></p>\n          <p><button onClick={(e) => this.demo()}>Demo</button></p>\n        </React.Fragment>\n      );\n    }\n    else if (!this.state.selectedPlaylist && this.state.playlists.length === 0) {\n      return (\n        <React.Fragment>\n          <p className='instruction'>\n            Nie załadowano odpowiednich playlist. <br/>\n            Odpowiednie playlisty zawierają conajmniej 50 utworów.\n          </p>\n\n        </React.Fragment>\n      );\n    }\n    else if (!this.state.selectedPlaylist) {\n      return (\n        <React.Fragment>\n          <p className='instruction'>\n            Wybierz playlistę. <br/>\n            Wyświetlane są tylko playlisty zawierające conajmniej 50 utworów.\n          </p>\n\n          <ul>{\n            this.state.playlists.map(playlist =>\n              <li key={playlist.name} onClick={(e) => this.selectPlaylist(playlist)}>\n                {playlist.name}\n              </li>\n            )\n          }</ul>\n\n        </React.Fragment>\n      );\n    }\n    else if (this.state.selectedPlaylist && this.state.tracks.length === this.state.selectedPlaylist.tracks.total) {\n      return (\n        <Quiz tracks={this.state.tracks} onReset={(e) => this.reset()}/>\n      );\n    }\n    else {\n      return null;\n    }\n  }\n}\n\nexport default SpotifyDataProvider;\n","import React, { Component } from 'react';\nimport SpotfiyDataProvider from './SpotifyDataProvider';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n          <SpotfiyDataProvider clientId=\"69a24db55aaa4480a40505135d3627ea\" />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}